found long brain ghost scheme stumble obtain chat feel trial boil spin

C++ provides a nice alternative data type to manipulate strings, and the data type is conveniently called string. Some of its widely used features are the following:

Declaration:

string a = "abc";
Size:

int len = a.size();
Concatenate two strings:

string a = "abc";
string b = "def";
string c = a + b; // c = "abcdef".
Accessing  element:

string s = "abc";
char   c0 = s[0];   // c0 = 'a'
char   c1 = s[1];   // c1 = 'b'
char   c2 = s[2];   // c2 = 'c'

s[0] = 'z';         // s = "zbc"
P.S.: We will use cin/cout to read/write a string

#class
Classes in C++ are user defined types declared with keyword class that has data and functions . Although classes and structures have the same type of functionality, there are some basic differences. The data members of a class are private by default and the members of a structure are public by default. Along with storing multiple data in a common block, it also assigns some functions (known as methods) to manipulate/access them. It serves as the building block of Object Oriented Programming.

It also has access specifiers, which restrict the access of member elements. The primarily used ones are the following:

public: Public members (variables, methods) can be accessed from anywhere the code is visible.
private: Private members can be accessed only by other member functions, and it can not be accessed outside of class.
Class can be represented in the form of

class ClassName {
    access_specifier1:
        type1 val1;
        type2 val2;
        ret_type1 method1(type_arg1 arg1, type_arg2 arg2,...)
        ...
    access_specifier2:
        type3 val3;
        type4 val4;
        ret_type2 method2(type_arg3 arg3, type_arg4 arg4,...)
        ...
};
It's a common practice to make all variables private, and set/get them using public methods. For example:

class SampleClass {
    private:
        int val;
    public:
        void set(int a) {
            val = a;
        }
        int get() {
            return val;
        }
};



                          STL(standard template library)
algoritm 
containers
functions 
iterations

             CONTAINERS
Pair:
   pair<int, int>p={1,3};
   cout<<p.first<<" "<<p.second;
   pair<int , pair<int,int>>p={1,{3,4}};
   cout<<p.first<<" "<<p.second.first<<" "<<p.second.second;
   pair<int, int>arr[]= {{1,2},{2,5},{5,1}};
   cout<<arr[1].second;

vector: 
Vectors are sequence containers representing arrays that can change in size.

Declaration:

vector<int>v; (creates an empty vector of integers)
Size:
int size=v.size();

Pushing an integer into a vector:
v.push_back(x);(where x is an integer.The size increases by 1 after this.)
v.emplace_back(x)

Popping the last element from the vector:

v.pop_back(); (After this the size decreases by 1)
Sorting a vector:

sort(v.begin(),v.end()); (Will sort all the elements in the vector)

vector<int> v(5,100);------>{100,100,100,100,100}
vector<int> v2(v1);----->v2 is copy of v1 


               #access elements of vector
vector<int>::iterator it =v.begin();
it++;
cout<< *(it)<< " ";
-------------------------------------------------------it=it+2
cout <<*(it)<<" ";

vector<int>::iterator it=v.end();
vector<int>::iterator it=v.rend();
vector<int>::iterator it=v.rbegin();

cout<< v[0]<< " "<<v.at(0);
cout<< v.back() <<" ";

for(vector<int>::iterator it=v.begin(); it !=v.end(); it++){
       cout <<*(it)<<" ";
}

for(auto it =v.begin(); it!=v.end();it++){
       cout <<*(it)<<" "; 
}

for(auto it : v){
   cout<< it <<" ";
}

                # erasing an element 0r 4 su6array
v.erase(v.begin()+1);
v.erase(v.begin()+2,v.begin()+4);

                #Insert function
vector<int>v(2,100);---------->{100,100}
v.insert(v.begin(),300);--------->{300,300,300}
v.insert(v.begin()+1,2,10);-------->{300,10,10,100,100}
vector<int>copy(2,50);------->{50,50}
v.insert(v.begin(),copy.begin(),copy.end());---->{50,50,300,10,10,100,100}

cout<<v.size();
v.pop_back();
v1.swap(v2)
-------------------------------------------------------
                 #LIST
list<int> ls;
ls.push_back(2);
ls.emplace_back(4);
ls.push_front(5);
ls.emplace_front(); 

// rest fuctions same as vector
//begin, end, rbegin, rend, clear,insert , size, swap
-------------------------------------------------------
                      #DEQUE
deque<int> dq;
dq.push_back(2);
dq.emplace_back(4);
dq.push_front(5);
dq.emplace_front(); 
dq.pop_back();
dq.pop_front();
dq.back();
dq,front();

// rest fuctions same as vector
//begin, end, rbegin, rend, clear,insert , size, swap
-------------------------------------------------------
                        #STACK (LIFO)
stack<int> st;
st.push(1);-->{1}
st.push(2);-->{2,1}
st.push(3);-->{3,2,1}
st.push(3);-->{3,3,2,1}
ls.emplace(5);-->{5,3,3,2,1}

cout<<  st.top();
st.pop();
cout<<st.top();
cout<< st.size();
cout<< st.empty();

stack<int>st1,st2;
st1.swap(st2);
-------------------------------------------------------                         #QUEUE (FIFO)
queue<int> q;
q.push(1);-->{1}
q.push(2);-->{1,2}
ls.emplace(4);-->{1,2,4}

q.back()+=5

cout<<  q.back();
q.pop();
cout<<q.front();
cout<< q.();
 //size swap empty same as stack
-------------------------------------------------------                       #priority_queue
priority_queue<int>pq;
pq.push(5);--->{5}
pq.push(2);--->{5,2}
pq.push(8);--->{8,5,2}
pq.emplace(10);--->{10,8,5,2}

cout<< pq.top(); //print 10
pq.pop(); //{8,5,2}
cout<< pq.top(); //print 8

priority_queue<int, vector<int>, greater<int>>pq;
pq.push(5);--->{5}
pq.push(2);--->{2,5}
pq.push(8);--->{2,5,8}
pq.emplace(10);--->{2,5,8,10}
-------------------------------------------------------
                          #SET(sorted and unique)
set<int>st;
st.insert(1);  //{1}
st.emplace(2);  //{1,2}
st.insert(2);  //{1,2}
st.insert(4);  //{1,2,4}
st.insert(3);  //{1,2,3,4}

//functionality of insert in vector
//can be used also, that only increases efficieny

// begin(),end(), rbegin(),rend(),size()
//empty() and swap() are same as those of above

auto it =st.find(3);
auto it = st.find(6);

st.erase(5);
 int cnt= st.count(1);
auto it = st.find(3);

auto it1 =st.find(2); 
auto it2 =st.find(4);
st.erase(it1,it2);

auto it =st.lower_bound(2);
auto it =st.upper_bound(3);
----------------------------------------------------
                          #MULTISET(sorted only)
multiset<int>ms;
ms.insert(1);
ms.erase(1);

int cnt= ms.count(1);
ms.erase(ms.find(1));
ms.erase(ms.find(1),ms.find(1)+2);
//rest all functions same as set
-------------------------------------------------------                      #UNORDERED SET(unique only)
inordered_set<int>us;   O(1)--->FOR ALL OPERATIONS(time complexity)


-------------------------------------------------------
            #Map{key,value} unique keys in sorted order
map<int,int>mpp;
map<int, pair<int,int>>mpp;
map<pair<int,int>,int>mpp;

mpp[1]=2;
mpp.emplace({3,1});
mpp.insert({2,4});
mpp[{2,3}]=10;
{
    {1,2}
    {2,4}
    {3,1}
}
for(auto it: mpp){
    cout<< it.first<<" "<<it.second<< endl;
}

cout<<mpp[1];
cout<<mpp[5];

auto it= mpp.find(3);
cout<< *(it).second;

auto it =mpp.find(5);
auto it =mpp.lower_bound(2);
auto it =mmp.upper_bound(3);
//erase, swap,size,empty, are same as above;
-------------------------------------------------------      #multi map(stores duplicate keys in sorter manner)
     #unorderedmap(unique keys but not sorted) O(1)

-------------------------------------------------------

                ALGORITHMS
sort(a,a+n);
sort(v.begin(),v.end());
sort(a+2,a+4);
sort(a,a+n,greater<int>);
pair<int,int>a[]={{1,2},{2,1},{4,1}};
sort(a,a+n,comp);-->comp=bool(T,F)


int cnt = __builtin_popcount();--->int
int cnt = __builtin_popcount();--->long long

string s="123";
sort(s.begin(),s.end());
do{
   cout<<s<<endl;
}while(next_permutation(s.begin(),s.end()));

int maxi=*max_element(a,a+n);



// address operator -> &
// pointer store address
int *ptr=&i;

arr[i]=*(arr + i)
i[arr]= *(i+arr);

{(-;}

















  
